package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"Server/graph/model"
	"Server/util"
	"context"
	"fmt"
	"time"

	"github.com/shirou/gopsutil/v3/cpu"
)

// CPU is the resolver for the cpu field.
func (r *queryResolver) CPU(ctx context.Context, interval *int) (*model.CPU, error) {
	cpuPercentage := func() string {
		var temp []float64
		if interval != nil {
			temp, _ = cpu.Percent(time.Duration(*interval)*time.Millisecond, false)
		} else {
			temp, _ = cpu.Percent(1000*time.Millisecond, false)
		}
		return fmt.Sprintf("%.1f", temp[0])
	}
	if r.cpu == nil {
		thisU := new(model.CPU)
		cpuInfo, _ := cpu.Info()
		thisU.Socket = len(cpuInfo)
		thisU.Logical, _ = cpu.Counts(true)
		thisU.Physical, _ = cpu.Counts(false)
		thisU.Name = cpuInfo[0].ModelName
		thisU.Ghz = fmt.Sprintf("%f", cpuInfo[0].Mhz/1000)[:3]
		thisU.Usage = cpuPercentage()
		r.cpu = thisU
	} else {
		r.cpu.Usage = cpuPercentage()
	}
	return r.cpu, nil
}

// RAM is the resolver for the ram field.
func (r *queryResolver) RAM(ctx context.Context) (*model.RAM, error) {
	rt := util.RamStat()
	return &rt, nil
}

// PrettyRAM is the resolver for the prettyRAM field.
func (r *queryResolver) PrettyRAM(ctx context.Context) (*model.PrettyRAM, error) {
	rt := util.PrettyRam(1)
	return &rt, nil
}

// TotalNet is the resolver for the totalNet field.
func (r *queryResolver) TotalNet(ctx context.Context, eachNic bool) ([]*model.Net, error) {
	stat := util.CurrentStat(eachNic)
	return util.Netstat2gql(stat, util.NetPretty(stat)), nil
}

// NetRate is the resolver for the netRate field.
func (r *queryResolver) NetRate(ctx context.Context, interval int, eachNic bool) ([]*model.Net, error) {
	stat := util.NetRate(interval, eachNic)
	return util.Netstat2gql(stat, util.NetRatePretty(stat)), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
